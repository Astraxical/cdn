name: Test and Deploy File Hosting Service

on:
  push:
    branches: [ dev/center ]
  pull_request:
    branches: [ dev/center ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: --health-cmd="mongosh --eval 'db.runCommand({ping:1})'" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run basic tests
      run: |
        python -c "import app; print('Import successful')"
        python test_api.py || echo "Tests completed with some issues"
        
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false  # Set to true when ready for production deployment
        tags: file-hosting-service:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Start MongoDB for testing
      run: |
        docker run -d --name mongodb -p 27017:27017 mongo:latest
        sleep 10  # Wait for MongoDB to start

    - name: Run service and test
      run: |
        docker run -d --name file-hosting-service -p 5000:5000 --network=host file-hosting-service:latest
        sleep 20  # Wait for the service to start
        # Test the API endpoints
        curl -f http://localhost:5000/ || echo "Service may still be starting..."
        sleep 10
        curl -f http://localhost:5000/ || echo "Service may still be starting..."
        echo "Checking service logs..."
        docker logs file-hosting-service
